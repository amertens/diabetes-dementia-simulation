try(res <- run_ltmle_glmnet(d_wide_list[[i]], resdf=NULL, Qint=TRUE, det.Q =TRUE, varmethod = "ic"))
return(res)
}
rm(list=ls())
library(here)
source(here::here("0_config.R"))
source(paste0(here::here(),"/functions/0_ltmle_Estimate_update.R"))
source(paste0(here::here(),"/functions/0_simulation_functions.R"))
library(parallel)
library(doParallel)
registerDoParallel(cores=64)
gc()
d_wide_list <- readRDS(file=here("data/simulated_data_list.RDS"))
d_wide_list <- d_wide_list[1:200]
gc()
resdf_DetQ_ic <- foreach(i = 1:length(d_wide_list), .combine = 'bind_rows', .errorhandling = 'remove') %dopar% {
res <- NULL
try(res <- run_ltmle_glmnet(d_wide_list[[i]], resdf=NULL, Qint=TRUE, det.Q =TRUE, varmethod = "ic"))
return(res)
}
rm(list=ls())
library(here)
source(here::here("0_config.R"))
source(paste0(here::here(),"/functions/0_ltmle_Estimate_update.R"))
source(paste0(here::here(),"/functions/0_simulation_functions.R"))
library(parallel)
library(doParallel)
registerDoParallel(cores=64)
gc()
d_wide_list <- readRDS(file=here("data/simulated_data_list.RDS"))
d_wide_list <- d_wide_list[1:200]
gc()
rm(list=ls())
library(here)
source(here::here("0_config.R"))
source(paste0(here::here(),"/functions/0_ltmle_Estimate_update.R"))
source(paste0(here::here(),"/functions/0_simulation_functions.R"))
library(parallel)
library(doParallel)
registerDoParallel(cores=64)
gc()
d_wide_list <- readRDS(file=here("data/simulated_data_list.RDS"))
d_wide_list <- d_wide_list[1:200]
gc()
resdf_Qint_DetQ_ic <- foreach(i = 1:length(d_wide_list), .combine = 'bind_rows', .errorhandling = 'remove') %dopar% {
res <- NULL
try(res <- run_ltmle_glmnet(d_wide_list[[i]], resdf=NULL, Qint=TRUE, det.Q =TRUE, varmethod = "ic"))
return(res)
}
saveRDS(resdf_Qint_DetQ_ic, paste0(here::here(),"/sim_res/protective/sim_res_Qint_DetQ_ic.RDS"))
resdf_Qint_ic <- foreach(i = 1:length(d_wide_list), .combine = 'bind_rows', .errorhandling = 'remove') %dopar% {
res <- NULL
try(res <- run_ltmle_glmnet(d_wide_list[[i]], resdf=NULL, Qint=TRUE, det.Q =FALSE, varmethod = "ic"))
return(res)
}
rm(list=ls())
library(here)
source(here::here("0_config.R"))
source(paste0(here::here(),"/functions/0_ltmle_Estimate_update.R"))
source(paste0(here::here(),"/functions/0_simulation_functions.R"))
library(parallel)
library(doParallel)
registerDoParallel(cores=64)
gc()
d_wide_list <- readRDS(file=here("data/simulated_data_list.RDS"))
d_wide_list <- d_wide_list[1:200]
gc()
resdf_Qint_DetQ_ic <- foreach(i = 1:length(d_wide_list), .combine = 'bind_rows', .errorhandling = 'remove') %dopar% {
res <- NULL
try(res <- run_ltmle_glmnet(d_wide_list[[i]], resdf=NULL, Qint=TRUE, det.Q =TRUE, varmethod = "ic"))
return(res)
}
saveRDS(resdf_Qint_DetQ_ic, paste0(here::here(),"/sim_res/protective/sim_res_Qint_DetQ_ic.RDS"))
d <- read.csv("C:/Users/andre/Downloads/msam_adverse_tab.csv")
head(d)
install.packages("funtimes")
#install.packages("funtimes")
library(funtimes)
head(d)
notrend_test(d[,2])
d[,2]
library(funtimes)
notrend_test(d[,2])
d[,2]
apply(d[,-1], 2, function(x) notrend_test(x)$p.value)
class(d[,2])
?notrend_test
set.seed(777)
n <- 100
Time <- c(1:n)
X0 <- arima.sim(list(order = c(1, 0, 0), ar = 0.5), n = n, n.start = 100, sd = 0.5)
X1 <- 2*Time/n + X0
X2 <- 2*(Time/n)^0.5 + X0
X3 <- 0.5*(Time - n/2)/n - 6*((Time - n/2)/n)^2 + X0
X <- as.data.frame(cbind(X0, X1, X2, X3))
notrend_test(X[,1])
class(X)
class(d)
class(X[,1])
class(d[,1])
class(d[,2])
notrend_test(d[,3])
X
d
notrend_test(d[,4])
#install.packages("funtimes")
library(trend)
install.packages("trend")
library(trend)
cs.test(d[,4])
head(d)
?cs.test
d <- read.csv("C:/Users/andre/Downloads/msam_adverse_tab.csv")
head(d)
d
cs.test(d[,1])
cs.test(d[,2])
cs.test(d[,3])
cs.test(d[,4])
cs.test(d[,5])
cs.test(d[,6])
cs.test(d[,7])
mk.test(d[,2])
mk.test(d[,3])
mk.test(d[,4])
mk.test(d[,5])
mk.test(d[,6])
mk.test(d[,7])
d[,2]
d[,3]
d[,4]
cs.test(d[,2])
cs.test(d[,3])
cs.test(d[,4])
cs.test(d[,5])
cs.test(d[,6])
cs.test(d[,7])
mk.test(d[,2])
mk.test(d[,3])
mk.test(d[,4])
mk.test(d[,5])
mk.test(d[,6])
mk.test(d[,7])
head(d)
ggplot(d, aes(x=Follow.up.week)) + geom_smooth(aes(y=Fever))
#install.packages("trend")
library(tidyverse)
#https://cran.r-project.org/web/packages/funtimes/vignettes/trendtests.html
d <- read.csv("C:/Users/andre/Downloads/msam_adverse_tab.csv")
head(d)
#install.packages("trend")
library(tidyverse)
library(trend)
cs.test(d[,2])
cs.test(d[,3])
cs.test(d[,4])
cs.test(d[,5])
cs.test(d[,6])
cs.test(d[,7])
mk.test(d[,2])
mk.test(d[,3])
mk.test(d[,4])
mk.test(d[,5])
mk.test(d[,6])
mk.test(d[,7])
ggplot(d, aes(x=Follow.up.week)) + geom_smooth(aes(y=Fever))
head(d)
ggplot(d, aes(x=Follow.up.week)) + geom_smooth(aes(y=Fever)) + geom_smooth(aes(y=Diarrhea))
d %>% pivot_longer(!Follow.up.week, names_to = "event", values_to = "count")
ggplot(plotdf, aes(x=Follow.up.week)) +
geom_smooth(aes(y=Fever), method="lm") +
facet_wrap(~event)
plotdf <- d %>% pivot_longer(!Follow.up.week, names_to = "event", values_to = "count")
ggplot(plotdf, aes(x=Follow.up.week)) +
geom_smooth(aes(y=Fever), method="lm") +
facet_wrap(~event)
ggplot(plotdf, aes(x=Follow.up.week)) +
geom_smooth(aes(y=count), method="lm") +
facet_wrap(~event)
ggplot(plotdf, aes(x=Follow.up.week)) +
geom_smooth(aes(y=count), method="lm") +
geom_point(aes(y=count)) +
facet_wrap(~event)
cs.test(d[,2])
cs.test(d[,3])
cs.test(d[,4])
cs.test(d[,5])
cs.test(d[,6])
cs.test(d[,7])
mk.test(d[,2])
mk.test(d[,3])
mk.test(d[,4])
mk.test(d[,5])
mk.test(d[,6])
mk.test(d[,7])
trueRD <- truth[10,2]
truth <- readRDS(paste0(here::here(),"/data/sim_res_truth.RDS"))
trueRD <- truth[10,2]
trueRD
trueRD <- truth[10,1]
trueRD
trueRD <- truth[10,3]
trueRD
rm(list=ls())
library(here)
source(here::here("0_config.R"))
source(paste0(here::here(),"/functions/0_ltmle_Estimate_update.R"))
source(paste0(here::here(),"/functions/0_simulation_functions.R"))
library(parallel)
library(doParallel)
registerDoParallel(cores=64)
gc()
d_wide_list <- readRDS(file=here("data/simulated_data_no_death_list"))
rm(list=ls())
library(lava)
library(data.table)
source(paste0(here::here(),"/functions/0_synthesizeDD.R"))
source(paste0(here::here(),"/functions/0_simulation_functions.R"))
cc <- fread(paste0(here::here(),"/data/coefficients.txt"))
cc_no_death <- cc %>% filter(!grepl("event_death", var))
u <- synthesizeDD(cc_no_death)
clean_sim_data_no_death <- function(d, N_time){
#d <- as.data.frame(sapply(d, as.numeric))
#d[is.na(d)] <- 0 #Missingness due to censoring should be coded 0 as long as censoring variable is equal to 1.
d<- data.table(d)
for(i in 1:(N_time+1)){
j=i+1
d[get(paste0("event_dementia_",i))==1, (paste0("event_dementia_",j)):=1]
}
dementia.nodes<- grep("event_dementia_",names(d))
d[, sum_dementia :=rowSums(.SD,na.rm=T), .SDcols = dementia.nodes]
return(d)
}
set.seed(12345)
sim_list <- NULL
n<-200
N_time=10
for(i in 1:n){
cat("\ni: ",i,"\n")
d <- sim(u,115698)
d$dem_prev <-    mean(1*(d$event_dementia_1 +
d$event_dementia_2 +
d$event_dementia_3 +
d$event_dementia_4 +
d$event_dementia_5 +
d$event_dementia_6 +
d$event_dementia_7 +
d$event_dementia_8 +
d$event_dementia_9 +
d$event_dementia_10 >0))
d<- clean_sim_data_no_death(d, N_time = 10)
sim_list[[i]] <- d
gc()
}
library(here)
source(here::here("0_config.R"))
source(paste0(here::here(),"/functions/0_ltmle_Estimate_update.R"))
source(paste0(here::here(),"/functions/0_simulation_functions.R"))
library(parallel)
library(doParallel)
registerDoParallel(cores=64)
i<-j<-1
resdf_boot = NULL
i<-1
j<-1
source(here::here("0_config.R"))
source(paste0(here::here(),"/0_ltmle_Estimate_update.R"))
source(here::here("0_config.R"))
source(paste0(here::here(),"/0_ltmle_Estimate_update.R"))
source(paste0(here::here(),"/simulation study/0_simulation_functions.R"))
source(here::here("0_config.R"))
source(paste0(here::here(),"/functions/0_ltmle_Estimate_update.R"))
source(paste0(here::here(),"/functions/0_simulation_functions.R"))
set.seed(j)
dboot <- d[sample(.N, nrow(d),replace=TRUE)]
res <- NULL
try(res <- run_ltmle_glmnet_no_death(dboot, N_time = 11, resdf=NULL, Qint=FALSE, det.Q=FALSE, varmethod = "ic", id=dboot$id), silent=TRUE)
registerDoParallel(cores=64)
i<-j<-1
resdf_boot = NULL
for(i in 1:200){
cat(i,"\n")
d <- d_wide_list[[i]]
d$id <- 1:nrow(d)
d<-d %>% select(id, everything())
res_df <- NULL
res_df <- foreach(j = 1:200, .combine = 'bind_rows', .errorhandling = 'remove') %dopar% {
source(here::here("0_config.R"))
source(paste0(here::here(),"/functions/0_ltmle_Estimate_update.R"))
source(paste0(here::here(),"/functions/0_simulation_functions.R"))
set.seed(j)
dboot <- d[sample(.N, nrow(d),replace=TRUE)]
res <- NULL
try(res <- run_ltmle_glmnet_no_death(dboot, N_time = 11, resdf=NULL, Qint=FALSE, det.Q=FALSE, varmethod = "ic", id=dboot$id), silent=TRUE)
return(res)
}
res_df
gc()
res_df$iteration <- i
resdf_boot <- bind_rows(resdf_boot, res_df)
saveRDS(res_df, paste0(here::here(),"/sim_res/no_death/bootstrap/sim_res_boot_",i,".RDS"))
}
sim_list[[1]]
dim(sim_list[[1]])
d_wide_list <-sim_list
cat(i,"\n")
d <- d_wide_list[[i]]
d$id <- 1:nrow(d)
d<-d %>% select(id, everything())
res_df <- NULL
gc()
library(parallel)
library(doParallel)
registerDoParallel(cores=64)
i<-j<-1
resdf_boot = NULL
for(i in 1:200){
cat(i,"\n")
d <- d_wide_list[[i]]
d$id <- 1:nrow(d)
d<-d %>% select(id, everything())
res_df <- NULL
res_df <- foreach(j = 1:200, .combine = 'bind_rows', .errorhandling = 'remove') %dopar% {
source(here::here("0_config.R"))
source(paste0(here::here(),"/functions/0_ltmle_Estimate_update.R"))
source(paste0(here::here(),"/functions/0_simulation_functions.R"))
set.seed(j)
dboot <- d[sample(.N, nrow(d),replace=TRUE)]
res <- NULL
try(res <- run_ltmle_glmnet_no_death(dboot, N_time = 11, resdf=NULL, Qint=FALSE, det.Q=FALSE, varmethod = "ic", id=dboot$id), silent=TRUE)
return(res)
}
res_df
gc()
res_df$iteration <- i
resdf_boot <- bind_rows(resdf_boot, res_df)
saveRDS(res_df, paste0(here::here(),"/sim_res/no_death/bootstrap/sim_res_boot_",i,".RDS"))
}
d_wide_list[[1]]
run_ltmle_glmnet_no_death
#lasso
int.start.time <- Sys.time()
resdf_DetQ_ic_t2 <- foreach(i = 1:length(d_wide_list), .combine = 'bind_rows', .errorhandling = 'remove') %dopar% {
res <- NULL
try(res <- run_ltmle_glmnet_no_death(d_wide_list[[i]], resdf=NULL, Qint=FALSE, det.Q =FALSE, varmethod = "ic", N_time = 2))
return(res)
}
int.end.time <- Sys.time()
difftime(int.end.time, int.start.time, units="mins")
saveRDS(resdf_DetQ_ic_t2, paste0(here::here(),"/sim_res/no_death/sim_res_ic_t2.RDS"))
int.start.time <- Sys.time()
resdf_DetQ_ic_t2 <- foreach(i = 1:length(d_wide_list), .combine = 'bind_rows', .errorhandling = 'remove') %dopar% {
res <- NULL
try(res <- run_ltmle_glmnet_no_death(d_wide_list[[i]], resdf=NULL, Qint=FALSE, det.Q =FALSE, varmethod = "tmle", N_time = 2))
return(res)
}
int.end.time <- Sys.time()
difftime(int.end.time, int.start.time, units="mins")
saveRDS(resdf_DetQ_ic_t2, paste0(here::here(),"/sim_res/no_death/sim_res_tmle_t2.RDS"))
resdf_DetQ_ic_t2
#lasso
int.start.time <- Sys.time()
resdf_DetQ_ic_t5 <- foreach(i = 1:length(d_wide_list), .combine = 'bind_rows', .errorhandling = 'remove') %dopar% {
res <- NULL
try(res <- run_ltmle_glmnet_no_death(d_wide_list[[i]], resdf=NULL, Qint=FALSE, det.Q =FALSE, varmethod = "ic", N_time = 5))
return(res)
}
int.end.time <- Sys.time()
difftime(int.end.time, int.start.time, units="mins")
saveRDS(resdf_DetQ_ic_t5, paste0(here::here(),"/sim_res/no_death/sim_res_ic_t5.RDS"))
int.start.time <- Sys.time()
resdf_DetQ_ic_t5 <- foreach(i = 1:length(d_wide_list), .combine = 'bind_rows', .errorhandling = 'remove') %dopar% {
res <- NULL
try(res <- run_ltmle_glmnet_no_death(d_wide_list[[i]], resdf=NULL, Qint=FALSE, det.Q =FALSE, varmethod = "tmle", N_time = 5))
return(res)
}
int.end.time <- Sys.time()
difftime(int.end.time, int.start.time, units="mins")
saveRDS(resdf_DetQ_ic_t5, paste0(here::here(),"/sim_res/no_death/sim_res_tmle_t5.RDS"))
rm(list=ls())
source(paste0(here::here(),"/0_config.R"))
source(paste0(here::here(),"/functions/0_ltmle_Estimate_update.R"))
source(paste0(here::here(),"/functions/0_simulation_functions.R"))
source(paste0(here::here(),"/functions/0_simulation_cleaning_functions.R"))
cc <- fread(paste0(here::here(),"/data/coefficients.txt"))
synthesizeDD.always <- function(coefficients, A_name = "glp1"){
requireNamespace("lava")
coefficients <- data.table(coefficients)
XNAMES <- names(coefficients)[-(1:3)]
BETA <- coefficients[,-(1:3),with=0L]
# collect At  nodes; intervene At=1 and Ct=0 later
loc_A <- grep(paste0("^", A_name, "_"), XNAMES)
beta_A <- BETA[, loc_A, with = F]
INTERCEPT <- coefficients[["(Intercept)"]]
# empty lava model for simulation
m <- lvm()
distribution(m,"age_base") <- normal.lvm(mean=70,sd=10)
distribution(m,"sex") <- binomial.lvm(p=0.4)
m <- addvar(m,"ie_type")
m <- addvar(m,"code5txt")
m <- addvar(m,"quartile_income")
# loop across time and variables
for (j in 1:NROW(coefficients)){
# At constant 1 -> intercept becomes intercept + At coefficient
# also remove At from fitted betas
temp_intercept <- INTERCEPT[j]
temp_sum_A_coef <- rowSums(beta_A[j], na.rm = T)  # intercept + At coefficients
temp_intercept <- temp_intercept + temp_sum_A_coef
V <- coefficients$var[j]
beta <- unlist(BETA[j,])
beta[loc_A] <- NA  # absorb A coefficient into intercept for always-on group; not depending on observed A values any more
X <- XNAMES[!is.na(beta)]
beta <- beta[!is.na(beta)]
# add V ~ Intercept + beta X
distribution(m,V) <- binomial.lvm()
#intercept(m,V) <- ifelse(grepl("event_death",V), INTERCEPT[j], temp_intercept) #remove competing risk
intercept(m,V) <-  temp_intercept #remove competing risk
regression(m,from=X,to=V) <- beta
}
class(m) <- c("synthesizeDD",class(m))
m
}
synthesizeDD.never <- function(coefficients, A_name = "glp1"){
requireNamespace("lava")
coefficients <- data.table(coefficients)
XNAMES <- names(coefficients)[-(1:3)]
BETA <- coefficients[,-(1:3),with=0L]
# collect At and Ct nodes; intervene At=1 and Ct=0 later
loc_A <- grep(paste0("^", A_name, "_"), XNAMES)
beta_A <- BETA[, loc_A, with = F]
INTERCEPT <- coefficients[["(Intercept)"]]
# empty lava model for simulation
m <- lvm()
distribution(m,"age_base") <- normal.lvm(mean=70,sd=10)
distribution(m,"sex") <- binomial.lvm(p=0.4)
m <- addvar(m,"ie_type")
m <- addvar(m,"code5txt")
m <- addvar(m,"quartile_income")
# loop across time and variables
for (j in 1:NROW(coefficients)){
V <- coefficients$var[j]
beta <- unlist(BETA[j,])
beta[loc_A] <- NA  # absorb A coefficient into intercept for always-on group; not depending on observed A values any more
X <- XNAMES[!is.na(beta)]
beta <- beta[!is.na(beta)]
# add V ~ Intercept + beta X
distribution(m,V) <- binomial.lvm()
intercept(m,V) <- INTERCEPT[j] #keep only intercept for "never on"
regression(m,from=X,to=V) <- beta
}
class(m) <- c("synthesizeDD",class(m))
m
}
#Dementia after death should be NA!
clean_sim_data <- function(d, N_time=10){
d<- data.table(d)
for(i in 1:(N_time+1)){
j=i+1
d[is.na(get(paste0("event_dementia_",i))), (paste0("event_dementia_",j)):=NA]
d[get(paste0("event_dementia_",i))==1, (paste0("event_dementia_",j)):=1]
d[get(paste0("event_death_",i))==1, (paste0("event_death_",j)):=1]
d[get(paste0("event_death_",i))==1, (paste0("event_dementia_",j)):=NA]
}
return(d)
}
seed <- 3457347
nsamp=3000000
set.seed(seed)
u <- synthesizeDD(cc)
d <- sim(u, nsamp)
set.seed(seed)
u.always <- synthesizeDD.always(cc)
d.always.full <- sim(u.always, nsamp)
set.seed(seed)
u.never <- synthesizeDD.never(cc)
d.never.full <- sim(u.never, nsamp)
d.always <- d.always.full
d.never <- d.never.full
# # #get deaths from the never on in case confounding by glp1 effect on comorbidities
# ddeath <- d.never.full %>% select(starts_with("event_death"))
# d.always.full <- d.always.full %>% select(!starts_with("event_death"))
# d.always.full <- bind_cols(d.always.full, ddeath)
#get deaths from the never on in case confounding by glp1 effect on comorbidities
ddeath <- d %>% select(starts_with("event_death"))
d.never.full <- d.never.full %>% select(!starts_with("event_death"))
d.always.full <- d.always.full %>% select(!starts_with("event_death"))
d.never.full <- bind_cols(d.never.full, ddeath)
d.always.full <- bind_cols(d.always.full, ddeath)
d.always <- clean_sim_data(d.always.full, 10)
d.never <- clean_sim_data(d.never.full, 10)
tRR1 <- mean(d.always$event_dementia_1,na.rm=T)/mean(d.never$event_dementia_1,na.rm=T)
tRR2 <- mean(d.always$event_dementia_2,na.rm=T)/mean(d.never$event_dementia_2,na.rm=T)
tRR3 <- mean(d.always$event_dementia_3,na.rm=T)/mean(d.never$event_dementia_3,na.rm=T)
tRR4 <- mean(d.always$event_dementia_4,na.rm=T)/mean(d.never$event_dementia_4,na.rm=T)
tRR5 <- mean(d.always$event_dementia_5,na.rm=T)/mean(d.never$event_dementia_5,na.rm=T)
tRR6 <- mean(d.always$event_dementia_6,na.rm=T)/mean(d.never$event_dementia_6,na.rm=T)
tRR7 <- mean(d.always$event_dementia_7,na.rm=T)/mean(d.never$event_dementia_7,na.rm=T)
tRR8 <- mean(d.always$event_dementia_8,na.rm=T)/mean(d.never$event_dementia_8,na.rm=T)
tRR9 <- mean(d.always$event_dementia_9,na.rm=T)/mean(d.never$event_dementia_9,na.rm=T)
tRR10 <- mean(d.always$event_dementia_10,na.rm=T)/mean(d.never$event_dementia_10,na.rm=T)
tRD1 <- mean(d.always$event_dementia_1,na.rm=T) - mean(d.never$event_dementia_1,na.rm=T)
tRD2 <- mean(d.always$event_dementia_2,na.rm=T) - mean(d.never$event_dementia_2,na.rm=T)
tRD3 <- mean(d.always$event_dementia_3,na.rm=T) - mean(d.never$event_dementia_3,na.rm=T)
tRD4 <- mean(d.always$event_dementia_4,na.rm=T) - mean(d.never$event_dementia_4,na.rm=T)
tRD5 <- mean(d.always$event_dementia_5,na.rm=T) - mean(d.never$event_dementia_5,na.rm=T)
tRD6 <- mean(d.always$event_dementia_6,na.rm=T) - mean(d.never$event_dementia_6,na.rm=T)
tRD7 <- mean(d.always$event_dementia_7,na.rm=T) - mean(d.never$event_dementia_7,na.rm=T)
tRD8 <- mean(d.always$event_dementia_8,na.rm=T) - mean(d.never$event_dementia_8,na.rm=T)
tRD9 <- mean(d.always$event_dementia_9,na.rm=T) - mean(d.never$event_dementia_9,na.rm=T)
tRD10 <- mean(d.always$event_dementia_10,na.rm=T) - mean(d.never$event_dementia_10,na.rm=T)
truth_df <- data.frame(time=1:10, RR=c(tRR1,tRR2,tRR3,tRR4,tRR5,tRR6,tRR7,tRR8,tRR9,tRR10), RD=c(tRD1,tRD2,tRD3,tRD4,tRD5,tRD6,tRD7,tRD8,tRD9,tRD10))
truth_df
